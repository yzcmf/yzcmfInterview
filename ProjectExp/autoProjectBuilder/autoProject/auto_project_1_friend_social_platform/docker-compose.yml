version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: social_platform_postgres
    environment:
      POSTGRES_DB: social_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/migrations:/docker-entrypoint-initdb.d
    networks:
      - social_platform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: social_platform_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - social_platform_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch 搜索引擎
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: social_platform_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - social_platform_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana 日志分析
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: social_platform_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - social_platform_network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: social_platform_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ai-service
    networks:
      - social_platform_network

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: social_platform_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8002
      - NEXT_PUBLIC_WS_URL=ws://localhost:8002
    depends_on:
      - backend
    networks:
      - social_platform_network

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: social_platform_backend
    ports:
      - "8002:8000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/social_platform
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - AI_SERVICE_URL=http://ai-service:8001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - social_platform_network

  # AI微服务
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.dev
    container_name: social_platform_ai_service
    ports:
      - "8001:8001"
    volumes:
      - ./ai-service:/app
      - ai_models:/app/models
    environment:
      - ENVIRONMENT=development
      - MODEL_PATH=/app/models
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/social_platform
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - social_platform_network

  # 聊天微服务 - 暂时注释掉，因为chat-service目录不存在
  # chat-service:
  #   build:
  #     context: ./chat-service
  #     dockerfile: Dockerfile.dev
  #   container_name: social_platform_chat_service
  #   ports:
  #     - "8002:8002"
  #   volumes:
  #     - ./chat-service:/app
  #     - /app/node_modules
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/social_platform
  #     - REDIS_URL=redis://redis:6379
  #     - JWT_SECRET=your-super-secret-jwt-key-change-in-production
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - social_platform_network

# Prometheus 监控
# prometheus:
#   image: prom/prometheus:latest
#   container_name: social_platform_prometheus
#   ports:
#     - "9090:9090"
#   volumes:
#     - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#     - prometheus_data:/prometheus
#   command:
#     - '--config.file=/etc/prometheus/prometheus.yml'
#     - '--storage.tsdb.path=/prometheus'
#     - '--web.console.libraries=/etc/prometheus/console_libraries'
#     - '--web.console.templates=/etc/prometheus/consoles'
#     - '--storage.tsdb.retention.time=200h'
#     - '--web.enable-lifecycle'
#   networks:
#     - social_platform_network

# Grafana 监控面板
# grafana:
#   image: grafana/grafana:latest
#   container_name: social_platform_grafana
#   ports:
#     - "3001:3000"
#   environment:
#     - GF_SECURITY_ADMIN_PASSWORD=admin123
#   volumes:
#     - grafana_data:/var/lib/grafana
#     - ./infrastructure/monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
#   depends_on:
#     - prometheus
#   networks:
#     - social_platform_network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  ai_models:
  prometheus_data:
  grafana_data:

networks:
  social_platform_network:
    driver: bridge 